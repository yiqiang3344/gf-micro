appName: web

server:
  address: ":8080"
  openapiPath: "/api.json"
  swaggerPath: "/swagger"
  LogStdout: false
  ErrorStack: false
  ErrorLogEnabled: false
  AccessLogEnabled: false
  graceful: true              # 是否开启平滑重启特性，开启时将会在本地增加10000的本地TCP端口用于进程间通信。默认false
  gracefulTimeout: 2           # 父进程在平滑重启后多少秒退出，默认2秒。若请求耗时大于该值，可能会导致请求中断

logger:
  path: "/var/gf-micro/log/web" # 日志文件路径。默认为空，表示关闭，仅输出到终端
  file: "app.log"                                     # 日志文件格式。默认为"{Y-m-d}.log"
  prefix: ""                                          # 日志内容输出前缀。默认为空
  level: "all"                                        # 日志输出级别
  timeFormat: "2006-01-02 15:04:05"                   # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
  ctxKeys: [ ]                                        # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
  header: true                                        # 是否打印日志的头信息。默认true
  stdout: false                                       # 日志是否同时输出到终端。默认true
  rotateSize: 100000000                               # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
  rotateExpire: "1d"                                  # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
  rotateBackupLimit: 30                               # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
  rotateBackupExpire: "30d"                           # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
  rotateBackupCompress: 0                             # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
  rotateCheckInterval: "1h"                           # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
  stdoutColorDisabled: false                          # 关闭终端的颜色打印。默认开启
  writerColorEnable: false                            # 日志文件是否带上颜色。默认false，表示不带颜色
  biz:
    path: "/var/gf-micro/log/web"     # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "biz.log"                                    # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                                          # 日志内容输出前缀。默认为空
    level: "all"                                        # 日志输出级别
    timeFormat: "2006-01-02 15:04:05"                   # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                                        # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                                        # 是否打印日志的头信息。默认true
    stdout: false                                       # 日志是否同时输出到终端。默认true
    rotateSize: 100000000                               # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: "1d"                                  # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 30                               # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "30d"                           # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 0                             # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                           # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false                          # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                            # 日志文件是否带上颜色。默认false，表示不带颜色
  access:
    path: "/var/gf-micro/log/web" # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "access.log"                                  # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                                          # 日志内容输出前缀。默认为空
    level: "all"                                        # 日志输出级别
    timeFormat: "2006-01-02 15:04:05"                   # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                                        # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                                        # 是否打印日志的头信息。默认true
    stdout: false                                       # 日志是否同时输出到终端。默认true
    rotateSize: 100000000                               # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: "1d"                                  # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 30                               # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "30d"                           # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 0                             # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                           # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false                          # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                            # 日志文件是否带上颜色。默认false，表示不带颜色
  error:
    path: "/var/gf-micro/log/web" # 日志文件路径。默认为空，表示关闭，仅输出到终端
    file: "error.log"                                   # 日志文件格式。默认为"{Y-m-d}.log"
    prefix: ""                                          # 日志内容输出前缀。默认为空
    level: "all"                                        # 日志输出级别
    timeFormat: "2006-01-02 15:04:05"                   # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    ctxKeys: [ ]                                        # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
    header: true                                        # 是否打印日志的头信息。默认true
    stdout: false                                       # 日志是否同时输出到终端。默认true
    rotateSize: 100000000                               # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
    rotateExpire: "1d"                                  # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性
    rotateBackupLimit: 30                               # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupExpire: "30d"                           # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
    rotateBackupCompress: 0                             # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
    rotateCheckInterval: "1h"                           # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
    stdoutColorDisabled: false                          # 关闭终端的颜色打印。默认开启
    writerColorEnable: false                            # 日志文件是否带上颜色。默认false，表示不带颜色

# 链路追踪
otlp:
  endpoint: "tracing-analysis-dc-bj.aliyuncs.com:8090"
  traceToken: "*_*"