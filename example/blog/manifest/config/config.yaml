#apollo:
#  AppID: "blog"
#  Cluster: "default"
#  IP: "http://localhost:8080"
#  NamespaceName: "application.yaml" #使用配置中心时，则把下方所有配置都放到application.yaml或拆分放到对应的namesapce中
#  IsBackupConfig: false
#  BackupConfigPath: ""
#  Secret: ""
#  SyncServerTimeout: 0
#  MustStart: true
#  Watch: true

appName: blog

# GRPC Server.
grpc:
  address: ":8087"
  name: "blog"
  logStdout: false
  errorStack: false
  errorLogEnabled: false
  accessLogEnabled: false
  graceful: true               # 是否开启平滑重启特性，开启时将会在本地增加10000的本地TCP端口用于进程间通信。默认false
  gracefulTimeout: 2           # 父进程在平滑重启后多少秒退出，默认2秒。若请求耗时大于该值，可能会导致请求中断

# Global logging.
logger:
  path: "/var/log/gf-micro/blog/app"  # 日志文件路径。默认为空，表示关闭，仅输出到终端
  file: "app.log"                                           # 日志文件格式。默认为"{Y-m-d}.log"
  prefix: ""                                                # 日志内容输出前缀。默认为空
  level: "all"                                              # 日志输出级别
  timeFormat: "2006-01-02 15:04:05.000"                     # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
  stdout: false                                             # 日志是否同时输出到终端。默认true
  stdoutColorDisabled: false                                # 关闭终端的颜色打印。默认开启，对于json格式日志没有用
  rotateSize: 100000000                                     # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性：大于100M则切分
  rotateExpire: "24h"                                       # 按照日志文件时间间隔对文件滚动切分。默认为0，表示关闭滚动切分特性：超过24小时则切分
  rotateBackupLimit: 30                                     # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除：备份文件最多保留30个
  rotateBackupExpire: "720h"                                # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除：备份文件只保留30天内的
  rotateBackupCompress: 0                                   # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
  rotateCheckInterval: "1h"                                 # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
  biz:
    path: "/var/log/gf-micro/blog/biz"
    file: "biz.log"
    level: "all"
    timeFormat: "2006-01-02 15:04:05.000"
    stdout: false
    rotateSize: 100000000
    rotateExpire: "24h"
    rotateBackupLimit: 30
    rotateBackupExpire: "720h"
    rotateBackupCompress: 0
    rotateCheckInterval: "1h"
  access:
    path: "/var/log/gf-micro/blog/access"
    file: "access.log"
    level: "all"
    timeFormat: "2006-01-02 15:04:05.000"
    stdout: false
    rotateSize: 100000000
    rotateExpire: "24h"
    rotateBackupLimit: 30
    rotateBackupExpire: "720h"
    rotateBackupCompress: 0
    rotateCheckInterval: "1h"
  error:
    path: "/var/log/gf-micro/blog/error"
    file: "error.log"
    level: "all"
    timeFormat: "2006-01-02 15:04:05.000"
    stdout: false
    rotateSize: 100000000
    rotateExpire: "24h"
    rotateBackupLimit: 30
    rotateBackupExpire: "720h"
    rotateBackupCompress: 0
    rotateCheckInterval: "1h"

jsonFormatLogs: [ "access", "biz" ]  # 需要json格式的日志，日志配置中file中.分割前的部分

# Database.
database:
  default:
    link: "mysql:root:12345678@tcp(127.0.0.1:3306)/gf_micro_blog"
    debug: false

# 链路追踪
otlp:
  endpoint: "ip:port"
  traceToken: "token"

# 服务注册发现
registry:
  grpcEtcd: "127.0.0.1:2379"

# rocketmq
rocketmq:
  endpoint: "127.0.0.1:8081"
  namespace: "gfMicro"
  accessKey: ""
  accessSecret: ""
  logPath: ""
  logStdout: false
  debug: false

# redis
redis:
  default:
    address: 127.0.0.1:6379
    db: 1
  #    pass:
  db:
    address: 127.0.0.1:6379
    db: 2
#    pass:

# xxljob
xxljob:
  serverAddr: "http://127.0.0.1:8182/xxl-job-admin"
  token: ""
